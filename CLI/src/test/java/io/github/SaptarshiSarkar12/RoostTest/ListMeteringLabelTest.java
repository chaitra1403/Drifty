// ********RoostGPT********
/*
Test generated by RoostGPT for test ra-integration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=96c4a9f895
ROOST_METHOD_SIG_HASH=263770cec3

 ########## Scenario ########## 

{
  feature: 'Feature: Metering Labels API',
  background: 'Background:\n    Given the API is available',
  rule: null,
  scenario: { title: 'Scenario: List Metering Label', steps: '', examples: '' }
}

*/

// ********RoostGPT********
package io.github.SaptarshiSarkar12.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;

class ListMeteringLabelTest {

    private String csvFile;
    private BufferedReader br;
    private String line;

    @BeforeEach
    public void setUp() throws IOException {
        Path path = FileSystems.getDefault().getPath("src/test/java/io/github/SaptarshiSarkar12/RoostTest/ListMeteringLabelTest.csv");
        csvFile = path.toString();
        br = new BufferedReader(new FileReader(csvFile));
        br.readLine(); // skipping the first line
    }

    @Test
    public void testListMeteringLabel() throws Exception {
        while ((line = br.readLine()) != null) {
            if (line.equals("")) continue;
            String[] payload = line.split("\\^\\|\\^");
            String method = payload[0];
            String url = payload[1];
            JSONParser parser = new JSONParser();
            JSONObject reqHeaders = (JSONObject) parser.parse(payload[2]);
            JSONObject reqBody = (JSONObject) parser.parse(payload[3]);
            int responseCode = Integer.parseInt(payload[4]);
            JSONObject responseBody = (JSONObject) parser.parse(payload[5]);

            RequestSpecification request = RestAssured.given();
            request.headers((Map<String, ?>) reqHeaders);
            request.body(reqBody.toJSONString());

            Response response;
            switch (method.toLowerCase()) {
                case "get":
                    response = request.get(url);
                    break;
                case "post":
                    response = request.post(url);
                    break;
                case "delete":
                    response = request.delete(url);
                    break;
                default:
                    throw new Exception("Invalid method type");
            }

            assertEquals(responseCode, response.getStatusCode());
            assertEquals(responseBody, response.getBody().jsonPath().getJsonObject(""));
        }
    }
}
