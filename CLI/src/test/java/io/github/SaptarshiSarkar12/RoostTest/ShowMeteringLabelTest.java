// ********RoostGPT********
/*
Test generated by RoostGPT for test ra-integration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=44caec965b
ROOST_METHOD_SIG_HASH=1998f3b7b7

 ########## Scenario ########## 

{
  feature: 'Feature: Metering Labels API',
  background: 'Background:\n    Given the API is available',
  rule: null,
  scenario: { title: 'Scenario: Show Metering Label', steps: '', examples: '' }
}

*/

// ********RoostGPT********
package io.github.SaptarshiSarkar12.RoostTest;

import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;


public class ShowMeteringLabelTest {
    String filePath;

    @BeforeEach
    void setup() {
        Path path = FileSystems.getDefault().getPath("src/test/java/io/github/SaptarshiSarkar12/RoostTest/ShowMeteringLabelTest.csv");
        filePath = path.toAbsolutePath().toString();
    }

    @Test
    void testMeteringLabelsAPIs() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line = reader.readLine(); // skipping the first line
        while ((line = reader.readLine()) != null && !line.isEmpty()) {
            String[] apiInfo = line.split("\\^\\|\\^");
            String method = apiInfo[0];
            String url = apiInfo[1];
            String reqHeaders = apiInfo[2];
            String reqBody = apiInfo[3];
            int responseCode = Integer.parseInt(apiInfo[4]);
            String responseBody = apiInfo[5];

            Response response = null;
            if (method.equalsIgnoreCase("get")) {
                response = given().header(reqHeaders).when().get(url).then().extract().response();
            } else if (method.equalsIgnoreCase("post")) {
                response = given().header(reqHeaders).body(reqBody).when().post(url).then().extract().response();
            } else if (method.equalsIgnoreCase("delete")) {
                response = given().header(reqHeaders).body(reqBody).when().delete(url).then().extract().response();
            }

            assertEquals(responseCode, response.statusCode());
            assertEquals(responseBody, response.getBody().asString());
        }
        reader.close();
    }
}
