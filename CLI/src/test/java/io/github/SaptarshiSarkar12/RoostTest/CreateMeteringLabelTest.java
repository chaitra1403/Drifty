// ********RoostGPT********
/*
Test generated by RoostGPT for test ra-integration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=283395715f
ROOST_METHOD_SIG_HASH=9393d39a4c

 ########## Scenario ########## 

{
  feature: 'Feature: Metering Labels API',
  background: 'Background:\n    Given the API is available',
  rule: null,
  scenario: { title: 'Scenario: Create Metering Label', steps: '', examples: '' }
}

*/

// ********RoostGPT********
package io.github.SaptarshiSarkar12.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CreateMeteringLabelTest {
    private String baseUrl;
    private Map<String, String> headers;
    private Map<String, String> payloadData;

    @BeforeEach
    public void setup() throws IOException {
        baseUrl = "http://localhost:8080";
        headers = new HashMap<>();
        payloadData = new HashMap<>();

        // Read the payload data from the file.
        Path path = FileSystems.getDefault().getPath("src", "test", "java", "io", "github", "SaptarshiSarkar12", "RoostTest", "CreateMeteringLabelTest.csv");
        BufferedReader reader = new BufferedReader(new FileReader(path.toFile()));

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) continue; // Skip empty lines.

            String[] parts = line.split("\\^\\|\\^");

            payloadData.put("METHOD", parts[0]);
            payloadData.put("URL", parts[1]);
            payloadData.put("REQ_HEADERS", parts[2]);
            payloadData.put("REQ_BODY", parts[3]);
            payloadData.put("RESPONSE_CODE", parts[4]);
            payloadData.put("RESPONSE_BODY", parts[5]);
        }

        reader.close();
    }

    @Test
    public void testCreateMeteringLabel() {
        // Given the API is available
        RestAssured.baseURI = baseUrl;

        // When I call the POST /v2.0/metering/metering-labels API
        Response response = RestAssured.given()
            .headers(headers)
            .body(payloadData.get("REQ_BODY"))
            .when()
            .post(payloadData.get("URL"));

        // Then I get a 201 response
        assertEquals(Integer.parseInt(payloadData.get("RESPONSE_CODE")), response.getStatusCode());

        // And the response body is empty
        assertEquals(payloadData.get("RESPONSE_BODY"), response.getBody().asString());
    }
}
