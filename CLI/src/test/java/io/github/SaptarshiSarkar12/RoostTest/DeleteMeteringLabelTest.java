// ********RoostGPT********
/*
Test generated by RoostGPT for test ra-integration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=76b9c9cffe
ROOST_METHOD_SIG_HASH=09158f32e1

 ########## Scenario ########## 

{
  feature: 'Feature: Metering Labels API',
  background: 'Background:\n    Given the API is available',
  rule: null,
  scenario: { title: 'Scenario: Delete Metering Label', steps: '', examples: '' }
}

*/

// ********RoostGPT********
package io.github.SaptarshiSarkar12.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Paths;

import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;

public class DeleteMeteringLabelTest {
    private static String BASE_URL;
    private static String filePath = Paths.get("src", "test", "java", "io", "github", "SaptarshiSarkar12", "RoostTest", "DeleteMeteringLabelTest.csv").toString();

    @BeforeClass
    public static void setup() {
        BASE_URL = "http://localhost:8080";
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void testDeleteMeteringLabel() {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            reader.readLine(); // skip the header
            while ((line = reader.readLine()) != null) {
                if (line.trim().isEmpty()) {
                    continue;
                }
                String[] payload = line.split("\\^\\|\\^");
                String method = payload[0];
                String url = payload[1];
                String reqHeaders = payload[2];
                String reqBody = payload[3];
                int responseCode = Integer.parseInt(payload[4]);
                String responseBody = payload[5];

                // Given the API is available
                Response response = null;
                if (method.equalsIgnoreCase("delete")) {
                    response = given()
                            .contentType(ContentType.JSON)
                            .body(reqBody)
                            .when()
                            .delete(url);
                }

                // Then the response status code is 204
                assertEquals(response.getStatusCode(), responseCode, "Incorrect response code");

                // And the response body is empty
                assertEquals(response.getBody().asString(), responseBody, "Incorrect response body");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
