// ********RoostGPT********
/*
Test generated by RoostGPT for test ra-integration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=39b9703bd1
ROOST_METHOD_SIG_HASH=5215613e02

 ########## Scenario ########## 

{
  feature: 'Feature: Metering Labels API',
  background: 'Background:\n    Given the API is available',
  rule: null,
  scenario: {
    title: 'Scenario: List Metering Labels',
    steps: 'When I send a GET request to "/v2.0/metering/metering-labels"\n' +
      'Then the response status code should be 200\n' +
      'And the response should be in JSON\n' +
      'And the response should contain the following metering labels:\n' +
      '      | id                                   | tenant_id                           | description            | name   |\n' +
      '      | a6700594-5b7a-4105-8bfe-723b346ce866 | 45345b0ee1ea477fac0f541b2cb79cd4   | label1 description     | label1 |\n' +
      '      | e131d186-b02d-4c0b-83d5-0c0725c4f812 | 45345b0ee1ea477fac0f541b2cb79cd4   | label2 description     | label2 |',
    examples: ''
  }
}

*/

// ********RoostGPT********
package io.github.SaptarshiSarkar12.RoostTest;

import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class ListMeteringLabelsTest {

    private Path payloadFilePath;
    private BufferedReader lineReader;

    @BeforeEach
    public void setUp() throws IOException {
        String pathString = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "io" + FileSystems.getDefault().getSeparator() + "github" + FileSystems.getDefault().getSeparator() + "SaptarshiSarkar12" + FileSystems.getDefault().getSeparator() + "RoostTest" + FileSystems.getDefault().getSeparator() + "ListMeteringLabelsTest.csv";
        payloadFilePath = FileSystems.getDefault().getPath(pathString);
        lineReader = new BufferedReader(new FileReader(payloadFilePath.toFile()));
        lineReader.readLine(); // skip the first line
    }

    @Test
    public void testListMeteringLabels() throws IOException {
        String line;
        while ((line = lineReader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }
            String[] payload = line.split("\\^\\|\\^");

            String method = payload[0];
            String url = payload[1];
            Map<String, String> headers = new HashMap<>(); // Assuming no headers in the request.
            String requestBody = payload[3];
            int responseCode = Integer.parseInt(payload[4]);
            String responseBody = payload[5];

            Response response = 
                given()
                    .headers(headers)
                    .body(requestBody)
                .when()
                    .request(method, url)
                .then()
                    .assertThat()
                    .statusCode(responseCode)
                    .extract()
                    .response();

            Assertions.assertEquals(responseBody, response.getBody().asString());
        }
        lineReader.close();
    }
}
